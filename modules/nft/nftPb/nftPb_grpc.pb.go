// Version

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: modules/nft/nftPb/nftPb.proto

package NFT_Bidding_Platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NftGrpcService_FindNftsInIds_FullMethodName = "/NftGrpcService/FindNftsInIds"
)

// NftGrpcServiceClient is the client API for NftGrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NftGrpcServiceClient interface {
	FindNftsInIds(ctx context.Context, in *FindNftsInIdsReq, opts ...grpc.CallOption) (*FindNftsInIdsRes, error)
}

type nftGrpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNftGrpcServiceClient(cc grpc.ClientConnInterface) NftGrpcServiceClient {
	return &nftGrpcServiceClient{cc}
}

func (c *nftGrpcServiceClient) FindNftsInIds(ctx context.Context, in *FindNftsInIdsReq, opts ...grpc.CallOption) (*FindNftsInIdsRes, error) {
	out := new(FindNftsInIdsRes)
	err := c.cc.Invoke(ctx, NftGrpcService_FindNftsInIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NftGrpcServiceServer is the server API for NftGrpcService service.
// All implementations must embed UnimplementedNftGrpcServiceServer
// for forward compatibility
type NftGrpcServiceServer interface {
	FindNftsInIds(context.Context, *FindNftsInIdsReq) (*FindNftsInIdsRes, error)
	mustEmbedUnimplementedNftGrpcServiceServer()
}

// UnimplementedNftGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNftGrpcServiceServer struct {
}

func (UnimplementedNftGrpcServiceServer) FindNftsInIds(context.Context, *FindNftsInIdsReq) (*FindNftsInIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNftsInIds not implemented")
}
func (UnimplementedNftGrpcServiceServer) mustEmbedUnimplementedNftGrpcServiceServer() {}

// UnsafeNftGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NftGrpcServiceServer will
// result in compilation errors.
type UnsafeNftGrpcServiceServer interface {
	mustEmbedUnimplementedNftGrpcServiceServer()
}

func RegisterNftGrpcServiceServer(s grpc.ServiceRegistrar, srv NftGrpcServiceServer) {
	s.RegisterService(&NftGrpcService_ServiceDesc, srv)
}

func _NftGrpcService_FindNftsInIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNftsInIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NftGrpcServiceServer).FindNftsInIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NftGrpcService_FindNftsInIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NftGrpcServiceServer).FindNftsInIds(ctx, req.(*FindNftsInIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NftGrpcService_ServiceDesc is the grpc.ServiceDesc for NftGrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NftGrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NftGrpcService",
	HandlerType: (*NftGrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindNftsInIds",
			Handler:    _NftGrpcService_FindNftsInIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/nft/nftPb/nftPb.proto",
}
